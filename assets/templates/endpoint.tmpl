// Code generated by proroc-gen-go-std. DO NOT EDIT.
// versions:
// 	protoc-gen-go-std v{{ .PluginVersion }}
// 	protoc            v{{ .CompilerVersion }}
// source: {{ .FileName }}

package {{ .PackageName }}

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/jinzhu/copier"
	"google.golang.org/protobuf/types/known/emptypb"


	"{{ .ProjectName }}/gen/db"
)

type {{ .Name }}StandardServer struct {
	Unimplemented{{ .Name }}ServiceServer
	qr db.Queries
}

func (s *{{ .Name }}StandardServer) List{{ .Name }}s(ctx context.Context, req *List{{ .Name }}sRequest) (res *List{{ .Name }}sResponse, err error) {
	params := &db.List{{ .Name }}sParams{
		PageToken: 0,
		PageSize:  20,
	}
	err = copier.CopyWithOption(
		&params,
		&req,
		copier.Option{IgnoreEmpty: true},
	)
	if err != nil {
		return nil, err
	}

	rows, err := s.qr.List{{ .Name }}s(ctx, *params)
	if err != nil {
		return nil, err
	}

	var items []*{{ .Name }}
	for _, row := range rows {
		var item {{ .Name }}

		err = copier.CopyWithOption(
			&item,
			&row,
			copier.Option{IgnoreEmpty: true},
		)
		if err != nil {
			return nil, err
		}

		items = append(items, &item)
	}

	nextPageToken := params.PageToken + params.PageSize

	res = &List{{ .Name }}sResponse{
		{{ .Name }}s:  items,
		NextPageToken: fmt.Sprint(nextPageToken),
	}

	return res, nil
}

func (s *{{ .Name }}StandardServer) Get{{ .Name }}(ctx context.Context, req *Get{{ .Name }}Request) (res *{{ .Name }}, err error) {
	id, err := uuid.Parse(req.Id)
	if err != nil {
		return nil, err
	}

	row, err := s.qr.Get{{ .Name }}(ctx, id)
	if err != nil {
		return nil, err
	}

	res = &{{ .Name }}{}
	err = copier.CopyWithOption(
		&res,
		&row,
		copier.Option{IgnoreEmpty: true},
	)
	if err != nil {
		return nil, err
	}

	return res, nil
}

func (s *{{ .Name }}StandardServer) Create{{ .Name }}(ctx context.Context, req *Create{{ .Name }}Request) (res *{{ .Name }}, err error) {
	var params db.Create{{ .Name }}Params
	err = copier.CopyWithOption(
		&params,
		&req,
		copier.Option{IgnoreEmpty: true},
	)

	row, err := s.qr.Create{{ .Name }}(ctx, params)
	if err != nil {
		return nil, err
	}

	res = &{{ .Name }}{}
	err = copier.CopyWithOption(
		&res,
		&row,
		copier.Option{IgnoreEmpty: true},
	)
	if err != nil {
		return nil, err
	}

	return res, nil
}

func (s *{{ .Name }}StandardServer) Update{{ .Name }}(ctx context.Context, req *Update{{ .Name }}Request) (res *{{ .Name }}, err error) {
	var params db.Update{{ .Name }}Params
	err = copier.CopyWithOption(
		&params,
		&req,
		copier.Option{IgnoreEmpty: true},
	)

	row, err := s.qr.Update{{ .Name }}(ctx, params)
	if err != nil {
		return nil, err
	}

	res = &{{ .Name }}{}
	err = copier.CopyWithOption(
		&res,
		&row,
		copier.Option{IgnoreEmpty: true},
	)
	if err != nil {
		return nil, err
	}

	return res, nil
}

func (s *{{ .Name }}StandardServer) Delete{{ .Name }}(ctx context.Context, req *Delete{{ .Name }}Request) (res *emptypb.Empty, err error) {
	id, err := uuid.Parse(req.Id)
	if err != nil {
		return nil, err
	}

	err = s.qr.Delete{{ .Name }}(ctx, id)
	if err != nil {
		return nil, err
	}

	return res, nil
}